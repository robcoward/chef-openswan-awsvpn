#!/bin/bash
# This script will startup a VPN connection to an AWS VPC. 
#
# 3. Make sure the inbound rules are configured in your EC2 security group
#   UDP port 500 allow
#   TCP port 179 allow
#
# 7. Reboot the instance and test the configuration by launching a Linux instance in your VPC and pinging that instance
#  $ ip netns exec openswan ping <IP address in your VPC>
#
# 8. If you need to troubleshoot the connectivity, the following commands are useful.
## Check the IPSEC SA
#  $ ip netns exec openswan ip xfrm state
#
## Check the BGP Neighbor (use testPassword as the password)
#  $ ip netns exec openswan telnet 127.0.0.1 2605
#  > show ip bgp summary
#
### BEGIN INIT INFO
# Provides:          VPN Gateway to AWS VPC
# Required-Start:    $network $remote_fs $syslog
# Required-Stop:     $syslog $remote_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start VPN Customer Gateway at boot time
# Description:       Start VPN Customer Gateway at boot time
### END INIT INFO

prog=$(basename $0)
# if DEBUG is set (to anything but '0') send a copy of the output to /dev/tty so the caller
# can see the messages without checking the system logs
if [ "$DEBUG" -a "$DEBUG" != 0 ]; then
    logger="logger -s -t $prog"
else
    logger="logger -t $prog"
fi

if [ `id -u` -ne 0 ]
then
    echo "permission denied (must be superuser)" |
      logger -s -p daemon.error -t $prog 2>&1
    exit 4
fi

RETVAL=0

. /etc/sysconfig/aws_gateway
ox='ip netns exec openswan'

setup_network() {
  #Create a network namespace
  ip netns add openswan

  #Create interfaces and assign IP
  ip link add type veth
  ip link set dev veth1 netns openswan
  ip link set dev veth0 name toopenswan
  ip addr add dev toopenswan $GATEWAY_IP/28
  $ox ip link set dev veth1 name eth0
  $ox ip addr add dev eth0 $NAMESPACE_TUNNEL1_IP/28
  $ox ip addr add dev eth0 $NAMESPACE_TUNNEL2_IP/28
  $ox ip addr add dev eth0 $CGW_TUNNEL1_INSIDE_IP/30
  $ox ip addr add dev eth0 $CGW_TUNNEL2_INSIDE_IP/30
  ip link set toopenswan up
  $ox ip link set eth0 up
  $ox ip link set lo up

  #Configure routing
  iptables -t nat -D PREROUTING -s $VGW_TUNNEL1_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL1_IP
  iptables -t nat -A PREROUTING -s $VGW_TUNNEL1_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL1_IP
  iptables -t nat -D POSTROUTING -d $VGW_TUNNEL1_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP
  iptables -t nat -A POSTROUTING -d $VGW_TUNNEL1_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP

  iptables -t nat -D PREROUTING -s $VGW_TUNNEL2_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL2_IP
  iptables -t nat -A PREROUTING -s $VGW_TUNNEL2_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL2_IP
  iptables -t nat -D POSTROUTING -d $VGW_TUNNEL2_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP
  iptables -t nat -A POSTROUTING -d $VGW_TUNNEL2_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP

  $ox ip r add default via $GATEWAY_IP
  sysctl -w net.ipv4.conf.all.forwarding=1
}

teardown_network() {
  ip link delete toopenswan type veth
  ip link delete veth0 type veth
  ip link delete veth1 type veth
  ip netns delete openswan

  iptables -t nat -D PREROUTING -s $VGW_TUNNEL1_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL1_IP
  iptables -t nat -D POSTROUTING -d $VGW_TUNNEL1_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP
  iptables -t nat -D PREROUTING -s $VGW_TUNNEL2_OUTSIDE_IP/32 -i eth0 -j DNAT --to-destination $NAMESPACE_TUNNEL2_IP
  iptables -t nat -D POSTROUTING -d $VGW_TUNNEL2_OUTSIDE_IP/32 -j SNAT --to-source $INSTANCE_IP

  sysctl -w net.ipv4.conf.all.forwarding=0
}

start_control_plane() {
  $ox /etc/init.d/ipsec restart
  $ox /etc/init.d/zebra restart
  $ox /etc/init.d/bgpd restart
}

stop_control_plane() {
  $ox /etc/init.d/bgpd stop
  $ox /etc/init.d/zebra stop
  $ox /etc/init.d/ipsec stop
}


start() {
    (
    setup_network
    start_control_plane
    RETVAL=$?
    ) 2>&1 | $logger
    return $RETVAL
}


stop() {
    (
    stop_control_plane
    teardown_network
    RETVAL=$?
    ) 2>&1 | $logger
    return $RETVAL
}

restart() {
    stop
    start
}

# do it
case "$1" in
    start|--start)
         start
         ;;
    stop|--stop)
         stop
         ;;
    restart|--restart)
         restart
         ;;
    *)
         echo "Usage: $prog {start|stop|restart}"
         RETVAL=2
esac

exit $RETVAL
